Name:                bench-bytestring
Version:             0.1.0.0
Synopsis:            Benchmarks for the lazy bytestring builder.
Description:
    This package is not meant for public release. It fixes a problem with the
    current benchmarking support in cabal, which has trouble compiling because
    criterion depends on bytestring. Here, we just include the whole source of
    the bytestring library directly.

License:             BSD3
License-file:        LICENSE
Category:            Data
Copyright:           (c) Simon Meier          2010-2011.

Author:              Simon Meier
Maintainer:          Simon Meier <iridcode@gmail.com>
                     Duncan Coutts <duncan@community.haskell.org>
Bug-reports:         iridcode@gmail.com
                     duncan@community.haskell.org
Tested-With:         GHC==7.0.3
Build-Type:          Simple
Cabal-Version:       >= 1.8

source-repository head
  type:     darcs
  location: http://darcs.haskell.org/bytestring/

executable bench-bytestring-builder
  hs-source-dirs:    . ..
  main-is:           BenchAll.hs

  build-depends:     base >= 4 && < 5
                   , ghc-prim
                   , deepseq       >= 1.2
                   , criterion     >= 0.5
                   , blaze-textual == 0.2.*
                   , blaze-builder == 0.3.*
                   -- we require bytestring due to benchmarking against
                   -- blaze-textual, which uses blaze-builder
                   , bytestring    >= 0.9

  -- cabal complains about ../ dirs. However, this is better than symlinks,
  -- which probably don't work on windows.
  c-sources:         ../cbits/fpstring.c
                     ../cbits/itoa.c
  include-dirs:      ../include
  includes:          fpstring.h
  install-includes:  fpstring.h

  ghc-options:      -O2
                    -fmax-simplifier-iterations=10
                    -fdicts-cheap
                    -fspec-constr-count=6

  if impl(ghc >= 6.11)
    cpp-options: -DINTEGER_GMP
    build-depends: integer-gmp >= 0.2

  if impl(ghc >= 6.9) && impl(ghc < 6.11)
    cpp-options: -DINTEGER_GMP
    build-depends: integer >= 0.1

  if impl(ghc)
    extensions:   UnliftedFFITypes,
                  MagicHash,
                  UnboxedTuples,
                  DeriveDataTypeable
                  ScopedTypeVariables
                  Rank2Types
                  NamedFieldPuns
                  PackageImports
                  ForeignFunctionInterface

-- executable bench-float-decimal
--   hs-source-dirs:    . ..
--   main-is:           BenchFloatDec.hs
-- 
--   build-depends:     base >= 4 && < 5
--                    , ghc-prim
--                    , deepseq       == 1.2.*
--                    , criterion     == 0.5.*
--                    , blaze-textual == 0.2.*
--                    , blaze-builder == 0.3.*
--                    -- we require bytestring due to benchmarking against
--                    -- blaze-textual, which uses blaze-builder
--                    , bytestring    == 0.9.*
-- 
--   -- cabal complains about ../ dirs. However, this is better than symlinks,
--   -- which probably don't work on windows.
--   c-sources:         ../cbits/fpstring.c
--                      ../cbits/itoa.c
--                      ../cbits/varint.c
--   include-dirs:      ../include
--   includes:          fpstring.h
--   install-includes:  fpstring.h
-- 
--   ghc-options:      -O2
--                     -fmax-simplifier-iterations=10
--                     -fdicts-cheap
--                     -fspec-constr-count=6
-- 
--   if impl(ghc >= 6.11)
--     cpp-options: -DINTEGER_GMP
--     build-depends: integer-gmp >= 0.2 && < 0.4
-- 
--   if impl(ghc >= 6.9) && impl(ghc < 6.11)
--     cpp-options: -DINTEGER_GMP
--     build-depends: integer >= 0.1 && < 0.2
-- 
--   if impl(ghc)
--     extensions:   UnliftedFFITypes,
--                   MagicHash,
--                   UnboxedTuples,
--                   DeriveDataTypeable
--                   ScopedTypeVariables
--                   Rank2Types
--                   NamedFieldPuns
--                   PackageImports
--                   ForeignFunctionInterface
