kind: pipeline
name: arm
platform: { os: linux, arch: arm }
steps:
- name: Test
  image: elmanhasa/haskell-base
  commands:
    - export LC_ALL=C.UTF-8
    - uname -a # check platform
    - getconf LONG_BIT # check bitness
    - cabal --version
    - cabal update
    - cabal new-test
---
kind: pipeline
name: arm64-ghc8.10
platform: { os: linux, arch: arm64 }
steps:
- name: Test
  image: haskell:8.10
  commands:
    - uname -a # check platform
    - getconf LONG_BIT # check bitness
    - cabal update
    - cabal new-test
---
kind: pipeline
name: arm64-ghc9.0
platform: { os: linux, arch: arm64 }
steps:
- name: Test
  image: haskell:9.0
  commands:
    - uname -a # check platform
    - getconf LONG_BIT # check bitness
    - cabal update
    - cabal new-test
---
kind: pipeline
name: arm64-ghc9.2
platform: { os: linux, arch: arm64 }
steps:
- name: Test
  image: haskell:9.2
  commands:
    - uname -a # check platform
    - getconf LONG_BIT # check bitness
    - cabal update
    - cabal new-test
---
kind: pipeline
name: i386
platform: { os: linux, arch: amd64 }
steps:
- name: Test
  image: i386/ubuntu
  commands:
    - export LC_ALL=C.UTF-8
    - uname -a # check platform
    - getconf LONG_BIT # check bitness
    - apt-get update -y
    - apt-get install -y ghc cabal-install
    - cabal --version # 1.24
    - cabal update
    # We need to break dependency circuit between optparse-applicative,
    # process, unix and bytestring. Newer versions of Cabal are capable
    # of coming up with these automatically, but older ones need a hint.
    # Specifically, we need to inform Cabal that:
    #
    # * optparse-applicative doesn't use process; 
    # * QuickCheck uses the old random package; and
    # * tasty doesn't use unix.
    - cabal install --dependencies-only --enable-tests --constraint 'optparse-applicative -process' --constraint 'QuickCheck +old-random' --constraint 'tasty -unix'
    - cabal test
