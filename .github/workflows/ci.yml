name: ci
on:
  push:
    branches:
      - master
      - bytestring-0.11
  pull_request: {} # Validate all PRs

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        ghc: ['8.0', '8.2', '8.4', '8.6', '8.8', '8.10', '9.0', '9.2.1']
        include:
        - os: windows-latest
          ghc: 'latest'
        - os: macOS-latest
          ghc: 'latest'
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      id: setup-haskell-cabal
      with:
        ghc-version: ${{ matrix.ghc }}
    - name: Update cabal package database
      run: cabal update
    - uses: actions/cache@v2
      name: Cache cabal stuff
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}
    # We rebuild tests several times to avoid intermittent failures on Windows
    # https://github.com/haskell/actions/issues/36
    # We also use --enable-tests and --enable-benchmarks to avoid
    # test and bench commands from reconfiguring and thus rebuilding.
    - name: Test
      run: |
        cabal sdist -z -o .
        cabal get bytestring-*.tar.gz
        cd bytestring-*/
        echo packages:. > cabal.project
        echo allow-newer:splitmix:base >> cabal.project
        bld() { cabal build bytestring:tests --enable-tests --enable-benchmarks; }
        bld || bld || bld
        cabal test --enable-tests --enable-benchmarks --test-show-details=direct all -j1
    - name: Bench
      run: |
        cd bytestring-*/
        cabal bench --enable-tests --enable-benchmarks --benchmark-option=-l all
    - name: Haddock
      run: |
        cd bytestring-*/
        cabal haddock
    - name: Cabal check
      run: |
        cd bytestring-*/
        cabal check

  # Emulation is incredibly slow and memory demanding. It seems that any
  # executable with GHC RTS takes at least 7-8 Gb of RAM, so we can run
  # `cabal` or `ghc` on their own, but cannot run them both at the same time,
  # striking out `cabal test`. Instead we rely on system packages and invoke
  # `ghc --make` manually, and even so `ghc -O` is prohibitively expensive.
  emulated:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        arch: ['s390x', 'ppc64le']
    steps:
    - uses: actions/checkout@v2
    - uses: uraimo/run-on-arch-action@v2.1.1
      timeout-minutes: 60
      with:
        arch: ${{ matrix.arch }}
        distro: ubuntu20.04
        githubToken: ${{ github.token }}
        install: |
          apt-get update -y
          apt-get install -y ghc libghc-tasty-quickcheck-dev
        run: |
          ghc --version
          ghc --make -Iinclude -itests:tests/builder -o Main cbits/*.c tests/Main.hs +RTS -s
          ./Main +RTS -s

  bounds-checking:
    runs-on: ubuntu-latest
    container:
      image: fedora:34
    steps:
    - name: install deps
      run: |
          dnf install -y gcc gmp gmp-devel make ncurses ncurses-compat-libs xz perl
          curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 BOOTSTRAP_HASKELL_MINIMAL=1 sh
          source ~/.ghcup/env
          ghcup install ghc -u https://downloads.haskell.org/~ghcup/unofficial-bindists/ghc/9.3.20220124/ghc-9.3.20220124-x86_64-linux-fedora-34-bounds-checking-ddf50f4b.tar.xz --set 9.3.20220124
          ghcup install cabal
      shell: bash
    - uses: actions/checkout@v1
    - name: test
      run: |
          source ~/.ghcup/env
          cabal update
          cabal run -w ghc-9.3.20220124 --ghc-options='-fcheck-prim-bounds -fno-ignore-asserts' bytestring-tests
      shell: bash
