name: ci
on:
  push:
    branches:
      - master
      - bytestring-0.11
  pull_request: {} # Validate all PRs

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        ghc: ['8.0', '8.2', '8.4', '8.6', '8.8', '8.10', '9.0', '9.2', '9.4']
        include:
        - os: macOS-latest
          ghc: 'latest'
    steps:
    - uses: actions/checkout@v3
    - name: Install libncurses5 and libtinfo
      if: runner.os == 'Linux' && (matrix.ghc == '8.0' || matrix.ghc == '8.2')
      run: |
        sudo apt-get install libncurses5 libtinfo5
    - uses: haskell/actions/setup@v2
      id: setup-haskell-cabal
      with:
        ghc-version: ${{ matrix.ghc }}
    - name: Update cabal package database
      run: cabal update
    - uses: actions/cache@v2
      name: Cache cabal stuff
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}
    - name: Test
      run: |
        cabal sdist -z -o .
        cabal get bytestring-*.tar.gz
        cd bytestring-*/
        cabal build bytestring:tests --enable-tests --enable-benchmarks
        cabal test --enable-tests --enable-benchmarks --test-show-details=direct all
    - name: Bench
      run: |
        cd bytestring-*/
        cabal bench --enable-tests --enable-benchmarks --benchmark-option=-l all
    - name: Haddock
      run: |
        cd bytestring-*/
        cabal haddock all
    - name: Cabal check
      run: |
        cd bytestring-*/
        cabal check

  windows-build:
    runs-on: windows-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - uses: haskell/actions/setup@v2
      id: setup-haskell-cabal
      with:
        ghc-version: 'latest'
    - name: Update cabal package database
      run: cabal update
    - uses: actions/cache@v2
      name: Cache cabal stuff
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: ${{ runner.os }}-latest
    # We rebuild tests several times to avoid intermittent failures on Windows
    # https://github.com/haskell/actions/issues/36
    # We also use --enable-tests and --enable-benchmarks to avoid
    # test and bench commands from reconfiguring and thus rebuilding.
    - name: Build Test
      run: |
        cabal sdist -z -o .
        cabal get bytestring-*.tar.gz
        cd bytestring-*/
        bld() { cabal build bytestring:tests --enable-tests --enable-benchmarks; }
        bld || bld || bld
        
    - name: Run Test
      # test broken linking on windows: https://github.com/haskell/bytestring/issues/497
      run: |
        $bin = cabal list-bin bytestring-tests
        $env:PATH = ''
        & "$bin"
      shell: pwsh

    - name: Bench
      run: |
        cd bytestring-*/
        cabal bench --enable-tests --enable-benchmarks --benchmark-option=-l all
    - name: Haddock
      run: |
        cd bytestring-*/
        cabal haddock all
    - name: Cabal check
      run: |
        cd bytestring-*/
        cabal check

  # Emulation is incredibly slow and memory demanding. It seems that any
  # executable with GHC RTS takes at least 7-8 Gb of RAM, so we can run
  # `cabal` or `ghc` on their own, but cannot run them both at the same time,
  # striking out `cabal test`. Instead we rely on system packages and invoke
  # `ghc --make` manually, and even so `ghc -O` is prohibitively expensive.
  emulated:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        arch: ['s390x', 'ppc64le', 'armv7', 'aarch64']
    steps:
    - uses: actions/checkout@v3
    - uses: uraimo/run-on-arch-action@v2.1.1
      timeout-minutes: 60
      with:
        arch: ${{ matrix.arch }}
        distro: ubuntu20.04
        githubToken: ${{ github.token }}
        install: |
          apt-get update -y
          apt-get install -y curl ghc libghc-tasty-quickcheck-dev
        run: |
          curl -s https://hackage.haskell.org/package/data-array-byte-0.1/data-array-byte-0.1.tar.gz | tar xz
          ghc --version
          ghc --make -Iinclude -itests:tests/builder:data-array-byte-0.1 -o Main cbits/*.c tests/Main.hs +RTS -s
          ./Main +RTS -s

  bounds-checking:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: haskell/actions/setup@v2
      id: setup-haskell-cabal
      with:
        ghc-version: 'latest'
    - name: Update cabal package database
      run: cabal update
    - uses: actions/cache@v2
      name: Cache cabal stuff
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: ${{ runner.os }}-latest
    - name: Test
      run: cabal test --ghc-options='-fcheck-prim-bounds -fno-ignore-asserts'

  old-gcc:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: centos:7
    steps:
    - name: install deps
      run: |
          yum install -y gcc gmp gmp-devel make ncurses ncurses-compat-libs xz perl
          curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 sh
    - uses: actions/checkout@v3
    - name: test
      run: |
          source ~/.ghcup/env
          cabal update
          cabal run bytestring-tests

  i386:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: i386/ubuntu:bionic
    steps:
    - name: Install
      run: |
        apt-get update -y
        apt-get install -y autoconf build-essential zlib1g-dev libgmp-dev curl libncurses5 libtinfo5 libncurses5-dev libtinfo-dev
        curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 sh
    - uses: actions/checkout@v1
    - name: Test
      run: |
        source ~/.ghcup/env
        cabal update
        cabal test

  arm:
    name: Build ARM
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: [self-hosted, Linux, ARM64, aarch32-linux]
            GHC_VER: 9.2.2
            CABAL_VER: 3.6.2.0
            ARCH: ARM
          - os: [self-hosted, Linux, ARM64]
            GHC_VER: 9.2.5
            CABAL_VER: 3.6.2.0
            ARCH: ARM64
    steps:
      - uses: docker://arm64v8/ubuntu:focal
        name: Cleanup (aarch64 linux)
        with:
          args: "find . -mindepth 1 -maxdepth 1 -exec rm -rf -- {} +"

      - name: git config
        run: |
          git config --global --get-all safe.directory | grep '^\*$' || git config --global --add safe.directory "*"
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v3

      - if: matrix.ARCH == 'ARM'
        uses: docker://hasufell/arm32v7-ubuntu-haskell:focal
        name: Run build (armv7 linux)
        with:
          args: sh .github/scripts/ci.sh
        env:
          GHC_VER: ${{ matrix.GHC_VER }}
          CABAL_VER: ${{ matrix.CABAL_VER }}

      - if: matrix.ARCH == 'ARM64'
        uses: docker://hasufell/arm64v8-ubuntu-haskell:focal
        name: Run build (aarch64 linux)
        with:
          args: sh .github/scripts/ci.sh
        env:
          GHC_VER: ${{ matrix.GHC_VER }}
          CABAL_VER: ${{ matrix.CABAL_VER }}

  arm-darwin:
    name: Build ARM
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: [self-hosted, macOS, ARM64]
            GHC_VER: 9.2.5
            CABAL_VER: 3.6.2.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run build
        run: |
          bash .github/scripts/brew.sh git coreutils llvm@11 autoconf automake
          export PATH="$HOME/.brew/opt/llvm@11/bin:$PATH"
          export CC="$HOME/.brew/opt/llvm@11/bin/clang"
          export CXX="$HOME/.brew/opt/llvm@11/bin/clang++"
          export LD=ld
          export AR="$HOME/.brew/opt/llvm@11/bin/llvm-ar"
          export RANLIB="$HOME/.brew/opt/llvm@11/bin/llvm-ranlib"
          bash .github/scripts/ci.sh
        env:
          GHC_VER: ${{ matrix.GHC_VER }}
          CABAL_VER: ${{ matrix.CABAL_VER }}
          HOMEBREW_CHANGE_ARCH_TO_ARM: 1
