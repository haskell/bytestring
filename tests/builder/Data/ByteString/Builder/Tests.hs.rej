@@ -641,8 +641,9 @@
   where
     enlarge (n, e) = n ^ (abs (e `mod` (50 :: Integer)))
 
-testsFloating :: [TestTree]
-testsFloating =
+testsFloating :: TestTree
+testsFloating = testGroup "RealFloat"
+  [ testGroup "Float"
     [ testMatches "f2sNonNumbersAndZero" floatDec show
           [ ( 0.0    , "0.0" )
           , ( (-0.0) , "-0.0" )
@@ -742,7 +743,9 @@
           , ( 1.2345678      , "1.2345678" )
           , ( 1.23456735e-36 , "1.23456735e-36" )
           ]
-  , testMatches "d2sBasic" doubleDec show
+    ]
+  , testGroup "Double"
+    [ testMatches "d2sBasic" doubleDec show
           [ ( 1.0    , "1.0" )
           , ( (-1.0) , "-1.0" )
           ]
@@ -962,6 +965,7 @@
     , testMatches "d2sPowersOf10" doubleDec show $
           fmap asShowRef [read ("1.0e" ++ show x) :: Double | x <- [-324..309 :: Int]]
     ]
+  ]
   where
     testExpected :: TestName -> (a -> Builder) -> [(a, String)] -> TestTree
     testExpected name dec = testCase name . traverse_ \(x, ref) -> LC.unpack (toLazyByteString (dec x)) @?= ref
